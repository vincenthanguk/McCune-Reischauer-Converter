"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("@parcel/logger");

  _logger = function () {
    return data;
  };

  return data;
}

function _diagnostic() {
  const data = _interopRequireWildcard(require("@parcel/diagnostic"));

  _diagnostic = function () {
    return data;
  };

  return data;
}

function _AssetGraph() {
  const data = _interopRequireDefault(require("./AssetGraph"));

  _AssetGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph() {
  const data = _interopRequireDefault(require("./public/BundleGraph"));

  _BundleGraph = function () {
    return data;
  };

  return data;
}

function _BundleGraph2() {
  const data = _interopRequireDefault(require("./BundleGraph"));

  _BundleGraph2 = function () {
    return data;
  };

  return data;
}

function _MutableBundleGraph() {
  const data = _interopRequireDefault(require("./public/MutableBundleGraph"));

  _MutableBundleGraph = function () {
    return data;
  };

  return data;
}

function _Bundle() {
  const data = require("./public/Bundle");

  _Bundle = function () {
    return data;
  };

  return data;
}

function _ReporterRunner() {
  const data = require("./ReporterRunner");

  _ReporterRunner = function () {
    return data;
  };

  return data;
}

function _dumpGraphToGraphViz() {
  const data = _interopRequireDefault(require("./dumpGraphToGraphViz"));

  _dumpGraphToGraphViz = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _PluginOptions() {
  const data = _interopRequireDefault(require("./public/PluginOptions"));

  _PluginOptions = function () {
    return data;
  };

  return data;
}

function _applyRuntimes() {
  const data = _interopRequireDefault(require("./applyRuntimes"));

  _applyRuntimes = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("./constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _utils2() {
  const data = require("./utils");

  _utils2 = function () {
    return data;
  };

  return data;
}

function _serializer() {
  const data = require("./serializer");

  _serializer = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class BundlerRunner {
  constructor(opts) {
    _defineProperty(this, "options", void 0);

    _defineProperty(this, "optionsRef", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "pluginOptions", void 0);

    _defineProperty(this, "farm", void 0);

    _defineProperty(this, "requestTracker", void 0);

    _defineProperty(this, "isBundling", false);

    this.options = opts.options;
    this.optionsRef = opts.optionsRef;
    this.config = opts.config;
    this.pluginOptions = new (_PluginOptions().default)(this.options);
    this.farm = opts.workerFarm;
    this.requestTracker = opts.requestTracker;
  }

  async bundle(graph, {
    signal
  }) {
    (0, _ReporterRunner().report)({
      type: 'buildProgress',
      phase: 'bundling'
    });
    let {
      plugin: bundler
    } = await this.config.getBundler();
    let configResult;

    if (bundler.loadConfig != null) {
      try {
        configResult = await (0, _nullthrows().default)(bundler.loadConfig)({
          options: this.pluginOptions,
          logger: new (_logger().PluginLogger)({
            origin: this.config.getBundlerName()
          })
        }); // TODO: add invalidations once bundling is a request
      } catch (e) {
        throw new (_diagnostic().default)({
          diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
            origin: this.config.getBundlerName()
          })
        });
      }
    }

    let cacheKey;

    if (!this.options.shouldDisableCache && !this.requestTracker.hasInvalidRequests()) {
      cacheKey = await this.getCacheKey(graph, configResult);
      let cachedBundleGraphBuffer;

      try {
        cachedBundleGraphBuffer = await this.options.cache.getBlob(cacheKey);
      } catch {// Cache miss
      }

      (0, _utils2().assertSignalNotAborted)(signal);
      let _cachedBundleGraphBuffer = cachedBundleGraphBuffer; // For Flow

      if (_cachedBundleGraphBuffer) {
        return [(0, _serializer().deserialize)(_cachedBundleGraphBuffer), _cachedBundleGraphBuffer];
      }
    }

    let internalBundleGraph = _BundleGraph2().default.fromAssetGraph(graph); // $FlowFixMe


    await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'before_bundle');
    let mutableBundleGraph = new (_MutableBundleGraph().default)(internalBundleGraph, this.options);

    try {
      var _configResult;

      await bundler.bundle({
        bundleGraph: mutableBundleGraph,
        config: (_configResult = configResult) === null || _configResult === void 0 ? void 0 : _configResult.config,
        options: this.pluginOptions,
        logger: new (_logger().PluginLogger)({
          origin: this.config.getBundlerName()
        })
      });
    } catch (e) {
      throw new (_diagnostic().default)({
        diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
          origin: this.config.getBundlerName()
        })
      });
    } finally {
      // $FlowFixMe
      await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_bundle');
    }

    (0, _utils2().assertSignalNotAborted)(signal);

    if (this.pluginOptions.mode === 'production') {
      try {
        var _configResult2;

        await bundler.optimize({
          bundleGraph: mutableBundleGraph,
          config: (_configResult2 = configResult) === null || _configResult2 === void 0 ? void 0 : _configResult2.config,
          options: this.pluginOptions,
          logger: new (_logger().PluginLogger)({
            origin: this.config.getBundlerName()
          })
        });
      } catch (e) {
        throw new (_diagnostic().default)({
          diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
            origin: this.config.getBundlerName()
          })
        });
      } finally {
        // $FlowFixMe
        await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_optimize');
      }

      (0, _utils2().assertSignalNotAborted)(signal);
    }

    await this.nameBundles(internalBundleGraph);
    await (0, _applyRuntimes().default)({
      bundleGraph: internalBundleGraph,
      requestTracker: this.requestTracker,
      config: this.config,
      options: this.options,
      optionsRef: this.optionsRef,
      pluginOptions: this.pluginOptions
    });
    (0, _utils2().assertSignalNotAborted)(signal); // $FlowFixMe

    await (0, _dumpGraphToGraphViz().default)(internalBundleGraph._graph, 'after_runtimes');
    let serializedBundleGraph = (0, _serializer().serialize)(internalBundleGraph);

    if (cacheKey != null) {
      await this.options.cache.setBlob(cacheKey, serializedBundleGraph);
    }

    (0, _utils2().assertSignalNotAborted)(signal);
    return [internalBundleGraph, serializedBundleGraph];
  }

  async getCacheKey(assetGraph, configResult) {
    let name = this.config.getBundlerName();
    let {
      version
    } = await this.config.getBundler();
    return (0, _utils().md5FromOrderedObject)({
      parcelVersion: _constants().PARCEL_VERSION,
      name,
      version,
      hash: assetGraph.getHash(),
      config: configResult === null || configResult === void 0 ? void 0 : configResult.config,
      // TODO: remove once bundling is a request and we track options as invalidations.
      hmrOptions: this.options.hmrOptions
    });
  }

  async nameBundles(bundleGraph) {
    let namers = await this.config.getNamers();
    let bundles = bundleGraph.getBundles();
    await Promise.all(bundles.map(bundle => this.nameBundle(namers, bundle, bundleGraph)));
    let bundlePaths = bundles.map(b => b.filePath);

    _assert().default.deepEqual(bundlePaths, (0, _utils().unique)(bundlePaths), 'Bundles must have unique filePaths');
  }

  async nameBundle(namers, internalBundle, internalBundleGraph) {
    let bundle = _Bundle().Bundle.get(internalBundle, internalBundleGraph, this.options);

    let bundleGraph = new (_BundleGraph().default)(internalBundleGraph, _Bundle().NamedBundle.get, this.options);

    for (let namer of namers) {
      try {
        let name = await namer.plugin.name({
          bundle,
          bundleGraph,
          options: this.pluginOptions,
          logger: new (_logger().PluginLogger)({
            origin: namer.name
          })
        });

        if (name != null) {
          if (_path().default.extname(name).slice(1) !== bundle.type) {
            throw new Error(`Destination name ${name} extension does not match bundle type "${bundle.type}"`);
          }

          let target = (0, _nullthrows().default)(internalBundle.target);
          internalBundle.filePath = _path().default.join(target.distDir, (0, _utils().normalizeSeparators)(name));
          internalBundle.name = name;
          let {
            hashReference
          } = internalBundle;
          internalBundle.displayName = name.includes(hashReference) ? name.replace(hashReference, '[hash]') : name;
          return;
        }
      } catch (e) {
        throw new (_diagnostic().default)({
          diagnostic: (0, _diagnostic().errorToDiagnostic)(e, {
            origin: namer.name,
            filePath: bundle.filePath
          })
        });
      }
    }

    throw new Error('Unable to name bundle');
  }

}

exports.default = BundlerRunner;