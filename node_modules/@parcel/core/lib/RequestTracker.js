"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getWatcherOptions = getWatcherOptions;
exports.default = exports.RequestGraph = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _Graph() {
  const data = _interopRequireDefault(require("./Graph"));

  _Graph = function () {
    return data;
  };

  return data;
}

function _utils2() {
  const data = require("./utils");

  _utils2 = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("./constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const nodeFromFilePath = filePath => ({
  id: filePath,
  type: 'file',
  value: {
    filePath
  }
});

const nodeFromGlob = glob => ({
  id: glob,
  type: 'glob',
  value: glob
});

const nodeFromFileName = fileName => ({
  id: 'file_name:' + fileName,
  type: 'file_name',
  value: fileName
});

const nodeFromRequest = request => ({
  id: request.id,
  type: 'request',
  value: request,
  invalidateReason: _constants().INITIAL_BUILD
});

const nodeFromEnv = (env, value) => ({
  id: 'env:' + env,
  type: 'env',
  value: {
    key: env,
    value
  }
});

const nodeFromOption = (option, value) => ({
  id: 'option:' + option,
  type: 'option',
  value: {
    key: option,
    hash: (0, _utils2().hashFromOption)(value)
  }
});

class RequestGraph extends _Graph().default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "invalidNodeIds", new Set());

    _defineProperty(this, "incompleteNodeIds", new Set());

    _defineProperty(this, "globNodeIds", new Set());

    _defineProperty(this, "envNodeIds", new Set());

    _defineProperty(this, "optionNodeIds", new Set());

    _defineProperty(this, "unpredicatableNodeIds", new Set());
  }

  // $FlowFixMe
  static deserialize(opts) {
    // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381
    let deserialized = new RequestGraph(opts);
    deserialized.invalidNodeIds = opts.invalidNodeIds;
    deserialized.incompleteNodeIds = opts.incompleteNodeIds;
    deserialized.globNodeIds = opts.globNodeIds;
    deserialized.envNodeIds = opts.envNodeIds;
    deserialized.optionNodeIds = opts.optionNodeIds;
    deserialized.unpredicatableNodeIds = opts.unpredicatableNodeIds; // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381 (Windows only)

    return deserialized;
  } // $FlowFixMe


  serialize() {
    return { ...super.serialize(),
      invalidNodeIds: this.invalidNodeIds,
      incompleteNodeIds: this.incompleteNodeIds,
      globNodeIds: this.globNodeIds,
      envNodeIds: this.envNodeIds,
      optionNodeIds: this.optionNodeIds,
      unpredicatableNodeIds: this.unpredicatableNodeIds
    };
  }

  addNode(node) {
    if (!this.hasNode(node.id)) {
      if (node.type === 'glob') {
        this.globNodeIds.add(node.id);
      }

      if (node.type === 'env') {
        this.envNodeIds.add(node.id);
      }

      if (node.type === 'option') {
        this.optionNodeIds.add(node.id);
      }
    }

    return super.addNode(node);
  }

  removeNode(node) {
    this.invalidNodeIds.delete(node.id);
    this.incompleteNodeIds.delete(node.id);

    if (node.type === 'glob') {
      this.globNodeIds.delete(node.id);
    }

    if (node.type === 'env') {
      this.envNodeIds.delete(node.id);
    }

    if (node.type === 'option') {
      this.optionNodeIds.delete(node.id);
    }

    return super.removeNode(node);
  }

  getRequestNode(id) {
    let node = (0, _nullthrows().default)(this.getNode(id));
    (0, _assert().default)(node.type === 'request');
    return node;
  }

  completeRequest(request) {
    this.invalidNodeIds.delete(request.id);
    this.incompleteNodeIds.delete(request.id);
  }

  replaceSubrequests(requestId, subrequestNodes) {
    let requestNode = this.getRequestNode(requestId);

    if (!this.hasNode(requestId)) {
      this.addNode(requestNode);
    }

    this.replaceNodesConnectedTo(requestNode, subrequestNodes, null, 'subrequest');
  }

  invalidateNode(node, reason) {
    (0, _assert().default)(node.type === 'request');

    if (this.hasNode(node.id)) {
      node.invalidateReason |= reason;
      this.invalidNodeIds.add(node.id);
      let parentNodes = this.getNodesConnectedTo(node, 'subrequest');

      for (let parentNode of parentNodes) {
        this.invalidateNode(parentNode, reason);
      }
    }
  }

  invalidateUnpredictableNodes() {
    for (let nodeId of this.unpredicatableNodeIds) {
      let node = (0, _nullthrows().default)(this.getNode(nodeId));
      (0, _assert().default)(node.type !== 'file' && node.type !== 'glob');
      this.invalidateNode(node, _constants().STARTUP);
    }
  }

  invalidateEnvNodes(env) {
    for (let nodeId of this.envNodeIds) {
      let node = (0, _nullthrows().default)(this.getNode(nodeId));
      (0, _assert().default)(node.type === 'env');

      if (env[node.value.key] !== node.value.value) {
        let parentNodes = this.getNodesConnectedTo(node, 'invalidated_by_update');

        for (let parentNode of parentNodes) {
          this.invalidateNode(parentNode, _constants().ENV_CHANGE);
        }
      }
    }
  }

  invalidateOptionNodes(options) {
    for (let nodeId of this.optionNodeIds) {
      let node = (0, _nullthrows().default)(this.getNode(nodeId));
      (0, _assert().default)(node.type === 'option');

      if ((0, _utils2().hashFromOption)(options[node.value.key]) !== node.value.hash) {
        let parentNodes = this.getNodesConnectedTo(node, 'invalidated_by_update');

        for (let parentNode of parentNodes) {
          this.invalidateNode(parentNode, _constants().OPTION_CHANGE);
        }
      }
    }
  }

  invalidateOnFileUpdate(requestId, filePath) {
    let requestNode = this.getRequestNode(requestId);
    let fileNode = nodeFromFilePath(filePath);

    if (!this.hasNode(fileNode.id)) {
      this.addNode(fileNode);
    }

    if (!this.hasEdge(requestNode.id, fileNode.id, 'invalidated_by_update')) {
      this.addEdge(requestNode.id, fileNode.id, 'invalidated_by_update');
    }
  }

  invalidateOnFileDelete(requestId, filePath) {
    let requestNode = this.getRequestNode(requestId);
    let fileNode = nodeFromFilePath(filePath);

    if (!this.hasNode(fileNode.id)) {
      this.addNode(fileNode);
    }

    if (!this.hasEdge(requestNode.id, fileNode.id, 'invalidated_by_delete')) {
      this.addEdge(requestNode.id, fileNode.id, 'invalidated_by_delete');
    }
  }

  invalidateOnFileCreate(requestId, input) {
    let requestNode = this.getRequestNode(requestId);
    let node;

    if (input.glob != null) {
      node = nodeFromGlob(input.glob);
    } else if (input.fileName != null && input.aboveFilePath != null) {
      let aboveFilePath = input.aboveFilePath; // Create nodes and edges for each part of the filename pattern.
      // For example, 'node_modules/foo' would create two nodes and one edge.
      // This creates a sort of trie structure within the graph that can be
      // quickly matched by following the edges. This is also memory efficient
      // since common sub-paths (e.g. 'node_modules') are deduplicated.

      let parts = input.fileName.split('/').reverse();
      let last;

      for (let part of parts) {
        let fileNameNode = nodeFromFileName(part);

        if (!this.hasNode(fileNameNode.id)) {
          this.addNode(fileNameNode);
        }

        if (last != null && !this.hasEdge(last.id, fileNameNode.id, 'dirname')) {
          this.addEdge(last.id, fileNameNode.id, 'dirname');
        }

        last = fileNameNode;
      } // The `aboveFilePath` condition asserts that requests are only invalidated
      // if the file being created is "above" it in the filesystem (e.g. the file
      // is created in a parent directory). There is likely to already be a node
      // for this file in the graph (e.g. the source file) that we can reuse for this.


      node = nodeFromFilePath(aboveFilePath);

      if (!this.hasNode(node.id)) {
        this.addNode(node);
      } // Now create an edge from the `aboveFilePath` node to the first file_name node
      // in the chain created above, and an edge from the last node in the chain back to
      // the `aboveFilePath` node. When matching, we will start from the first node in
      // the chain, and continue following it to parent directories until there is an
      // edge pointing an `aboveFilePath` node that also points to the start of the chain.
      // This indicates a complete match, and any requests attached to the `aboveFilePath`
      // node will be invalidated.


      let firstId = 'file_name:' + parts[0];

      if (!this.hasEdge(node.id, firstId, 'invalidated_by_create_above')) {
        this.addEdge(node.id, firstId, 'invalidated_by_create_above');
      }

      (0, _assert().default)(last != null);

      if (!this.hasEdge(last.id, node.id, 'invalidated_by_create_above')) {
        this.addEdge(last.id, node.id, 'invalidated_by_create_above');
      }
    } else if (input.filePath != null) {
      node = nodeFromFilePath(input.filePath);
    } else {
      throw new Error('Invalid invalidation');
    }

    if (!this.hasNode(node.id)) {
      this.addNode(node);
    }

    if (!this.hasEdge(requestNode.id, node.id, 'invalidated_by_create')) {
      this.addEdge(requestNode.id, node.id, 'invalidated_by_create');
    }
  }

  invalidateOnStartup(requestId) {
    let requestNode = this.getRequestNode(requestId);
    this.unpredicatableNodeIds.add(requestNode.id);
  }

  invalidateOnEnvChange(requestId, env, value) {
    let requestNode = this.getRequestNode(requestId);
    let envNode = nodeFromEnv(env, value);

    if (!this.hasNode(envNode.id)) {
      this.addNode(envNode);
    }

    if (!this.hasEdge(requestNode.id, envNode.id, 'invalidated_by_update')) {
      this.addEdge(requestNode.id, envNode.id, 'invalidated_by_update');
    }
  }

  invalidateOnOptionChange(requestId, option, value) {
    let requestNode = this.getRequestNode(requestId);
    let optionNode = nodeFromOption(option, value);

    if (!this.hasNode(optionNode.id)) {
      this.addNode(optionNode);
    }

    if (!this.hasEdge(requestNode.id, optionNode.id, 'invalidated_by_update')) {
      this.addEdge(requestNode.id, optionNode.id, 'invalidated_by_update');
    }
  }

  clearInvalidations(node) {
    this.unpredicatableNodeIds.delete(node.id);
    this.replaceNodesConnectedTo(node, [], null, 'invalidated_by_update');
    this.replaceNodesConnectedTo(node, [], null, 'invalidated_by_delete');
    this.replaceNodesConnectedTo(node, [], null, 'invalidated_by_create');
  }

  getInvalidations(requestId) {
    if (!this.hasNode(requestId)) {
      return [];
    } // For now just handling updates. Could add creates/deletes later if needed.


    let requestNode = this.getRequestNode(requestId);
    let invalidations = this.getNodesConnectedFrom(requestNode, 'invalidated_by_update');
    return invalidations.map(node => {
      switch (node.type) {
        case 'file':
          return {
            type: 'file',
            filePath: node.value.filePath
          };

        case 'env':
          return {
            type: 'env',
            key: node.value.key
          };

        case 'option':
          return {
            type: 'option',
            key: node.value.key
          };
      }
    }).filter(Boolean);
  }

  getSubRequests(requestId) {
    if (!this.hasNode(requestId)) {
      return [];
    }

    let requestNode = this.getRequestNode(requestId);
    let subRequests = this.getNodesConnectedFrom(requestNode, 'subrequest');
    return subRequests.map(node => {
      (0, _assert().default)(node.type === 'request');
      return node.value;
    });
  }

  invalidateFileNameNode(node, filePath, matchNodes) {
    // If there is an edge between this file_name node and one of the original file nodes pointed to
    // by the original file_name node, and the matched node is inside the current directory, invalidate
    // all connected requests pointed to by the file node.
    let dirname = _path().default.dirname(filePath);

    for (let matchNode of matchNodes) {
      if (this.hasEdge(node.id, matchNode.id, 'invalidated_by_create_above') && (0, _utils().isDirectoryInside)(_path().default.dirname(matchNode.value.filePath), dirname)) {
        let connectedNodes = this.getNodesConnectedTo(matchNode, 'invalidated_by_create');

        for (let connectedNode of connectedNodes) {
          this.invalidateNode(connectedNode, _constants().FILE_CREATE);
        }
      }
    } // Find the `file_name` node for the parent directory and
    // recursively invalidate connected requests as described above.


    let basename = _path().default.basename(dirname);

    let parent = this.getNode('file_name:' + basename);

    if (parent != null && this.hasEdge(node.id, parent.id, 'dirname')) {
      (0, _assert().default)(parent.type === 'file_name');
      this.invalidateFileNameNode(parent, dirname, matchNodes);
    }
  }

  respondToFSEvents(events) {
    let didInvalidate = false;

    for (let {
      path: filePath,
      type
    } of events) {
      let node = this.getNode(filePath); // sometimes mac os reports update events as create events.
      // if it was a create event, but the file already exists in the graph,
      // then also invalidate nodes connected by invalidated_by_update edges.

      if (node && (type === 'create' || type === 'update')) {
        let nodes = this.getNodesConnectedTo(node, 'invalidated_by_update');

        for (let connectedNode of nodes) {
          didInvalidate = true;
          this.invalidateNode(connectedNode, _constants().FILE_UPDATE);
        }

        if (type === 'create') {
          let nodes = this.getNodesConnectedTo(node, 'invalidated_by_create');

          for (let connectedNode of nodes) {
            didInvalidate = true;
            this.invalidateNode(connectedNode, _constants().FILE_CREATE);
          }
        }
      } else if (type === 'create') {
        let basename = _path().default.basename(filePath);

        let fileNameNode = this.getNode('file_name:' + basename);

        if ((fileNameNode === null || fileNameNode === void 0 ? void 0 : fileNameNode.type) === 'file_name') {
          // Find potential file nodes to be invalidated if this file name pattern matches
          let above = this.getNodesConnectedTo(fileNameNode, 'invalidated_by_create_above').map(node => {
            (0, _assert().default)(node.type === 'file');
            return node;
          });

          if (above.length > 0) {
            didInvalidate = true;
            this.invalidateFileNameNode(fileNameNode, filePath, above);
          }
        }

        for (let id of this.globNodeIds) {
          let globNode = this.getNode(id);
          (0, _assert().default)(globNode && globNode.type === 'glob');

          if ((0, _utils().isGlobMatch)(filePath, globNode.value)) {
            let connectedNodes = this.getNodesConnectedTo(globNode, 'invalidated_by_create');

            for (let connectedNode of connectedNodes) {
              didInvalidate = true;
              this.invalidateNode(connectedNode, _constants().FILE_CREATE);
            }
          }
        }
      } else if (node && type === 'delete') {
        for (let connectedNode of this.getNodesConnectedTo(node, 'invalidated_by_delete')) {
          didInvalidate = true;
          this.invalidateNode(connectedNode, _constants().FILE_DELETE);
        }
      }
    }

    return didInvalidate && this.invalidNodeIds.size > 0;
  }

}

exports.RequestGraph = RequestGraph;

class RequestTracker {
  constructor({
    graph,
    farm,
    options
  }) {
    _defineProperty(this, "graph", void 0);

    _defineProperty(this, "farm", void 0);

    _defineProperty(this, "options", void 0);

    _defineProperty(this, "signal", void 0);

    this.graph = graph || new RequestGraph();
    this.farm = farm;
    this.options = options;
  } // TODO: refactor (abortcontroller should be created by RequestTracker)


  setSignal(signal) {
    this.signal = signal;
  }

  startRequest(request) {
    if (!this.graph.hasNode(request.id)) {
      let node = nodeFromRequest(request);
      this.graph.addNode(node);
    } else {
      // Clear existing invalidations for the request so that the new
      // invalidations created during the request replace the existing ones.
      this.graph.clearInvalidations(this.graph.getRequestNode(request.id));
    }

    this.graph.incompleteNodeIds.add(request.id);
    this.graph.invalidNodeIds.delete(request.id);
  }

  removeRequest(id) {
    this.graph.removeById(id);
  } // If a cache key is provided, the result will be removed from the node and stored in a separate cache entry


  storeResult(id, result, cacheKey) {
    let node = this.graph.getNode(id);

    if (node && node.type === 'request') {
      node.value.result = result;
      node.value.resultCacheKey = cacheKey;
    }
  }

  hasValidResult(id) {
    return this.graph.nodes.has(id) && !this.graph.invalidNodeIds.has(id) && !this.graph.incompleteNodeIds.has(id);
  }

  async getRequestResult(id) {
    let node = (0, _nullthrows().default)(this.graph.getNode(id));
    (0, _assert().default)(node.type === 'request');

    if (node.value.result != undefined) {
      // $FlowFixMe
      let result = node.value.result;
      return result;
    } else if (node.value.resultCacheKey != null) {
      let cachedResult = (0, _nullthrows().default)(await this.options.cache.get(node.value.resultCacheKey) // $FlowFixMe
      );
      node.value.result = cachedResult;
      return cachedResult;
    }
  }

  completeRequest(id) {
    this.graph.invalidNodeIds.delete(id);
    this.graph.incompleteNodeIds.delete(id);
    let node = this.graph.getNode(id);

    if ((node === null || node === void 0 ? void 0 : node.type) === 'request') {
      node.invalidateReason = _constants().VALID;
    }
  }

  rejectRequest(id) {
    this.graph.incompleteNodeIds.delete(id);
    let node = this.graph.getNode(id);

    if ((node === null || node === void 0 ? void 0 : node.type) === 'request') {
      this.graph.invalidateNode(node, _constants().ERROR);
    }
  }

  respondToFSEvents(events) {
    return this.graph.respondToFSEvents(events);
  }

  hasInvalidRequests() {
    return this.graph.invalidNodeIds.size > 0;
  }

  getInvalidRequests() {
    let invalidRequests = [];

    for (let id of this.graph.invalidNodeIds) {
      let node = (0, _nullthrows().default)(this.graph.getNode(id));
      (0, _assert().default)(node.type === 'request');
      invalidRequests.push(node.value);
    }

    return invalidRequests;
  }

  replaceSubrequests(requestId, subrequestNodes) {
    this.graph.replaceSubrequests(requestId, subrequestNodes);
  }

  async runRequest(request, opts) {
    let id = request.id;
    let hasValidResult = this.hasValidResult(id);

    if (!(opts !== null && opts !== void 0 && opts.force) && hasValidResult) {
      // $FlowFixMe
      return this.getRequestResult(id);
    }

    let {
      api,
      subRequests
    } = this.createAPI(id);

    try {
      this.startRequest({
        id,
        type: request.type,
        input: request.input
      });
      let node = this.graph.getRequestNode(id);
      let result = await request.run({
        input: request.input,
        api,
        farm: this.farm,
        options: this.options,
        prevResult: await this.getRequestResult(id),
        invalidateReason: node.invalidateReason
      });
      (0, _utils2().assertSignalNotAborted)(this.signal);
      this.completeRequest(id);
      return result;
    } catch (err) {
      this.rejectRequest(id);
      throw err;
    } finally {
      this.graph.replaceSubrequests(id, [...subRequests].map(subRequestId => (0, _nullthrows().default)(this.graph.getNode(subRequestId))));
    }
  }

  createAPI(requestId) {
    let subRequests = new Set();
    let invalidations = this.graph.getInvalidations(requestId);
    return {
      api: {
        invalidateOnFileCreate: input => this.graph.invalidateOnFileCreate(requestId, input),
        invalidateOnFileDelete: filePath => this.graph.invalidateOnFileDelete(requestId, filePath),
        invalidateOnFileUpdate: filePath => this.graph.invalidateOnFileUpdate(requestId, filePath),
        invalidateOnStartup: () => this.graph.invalidateOnStartup(requestId),
        invalidateOnEnvChange: env => this.graph.invalidateOnEnvChange(requestId, env, this.options.env[env]),
        invalidateOnOptionChange: option => this.graph.invalidateOnOptionChange(requestId, option, this.options[option]),
        getInvalidations: () => invalidations,
        storeResult: (result, cacheKey) => {
          this.storeResult(requestId, result, cacheKey);
        },
        getSubRequests: () => this.graph.getSubRequests(requestId),
        getRequestResult: id => this.getRequestResult(id),
        canSkipSubrequest: id => {
          if (this.hasValidResult(id)) {
            subRequests.add(id);
            return true;
          }

          return false;
        },
        runRequest: (subRequest, opts) => {
          subRequests.add(subRequest.id);
          return this.runRequest(subRequest, opts);
        }
      },
      subRequests
    };
  }

  async writeToCache() {
    let cacheKey = (0, _utils().md5FromObject)({
      parcelVersion: _constants().PARCEL_VERSION,
      entries: this.options.entries
    });
    let requestGraphKey = (0, _utils().md5FromString)(`${cacheKey}:requestGraph`);
    let snapshotKey = (0, _utils().md5FromString)(`${cacheKey}:snapshot`);

    if (this.options.shouldDisableCache) {
      return;
    }

    let promises = [];

    for (let [, node] of this.graph.nodes) {
      if (node.type !== 'request') {
        continue;
      }

      let resultCacheKey = node.value.resultCacheKey;

      if (resultCacheKey != null && node.value.result != null) {
        promises.push(this.options.cache.set(resultCacheKey, node.value.result));
        delete node.value.result;
      }
    }

    promises.push(this.options.cache.set(requestGraphKey, this.graph));
    let opts = getWatcherOptions(this.options);

    let snapshotPath = this.options.cache._getCachePath(snapshotKey, '.txt');

    promises.push(this.options.inputFS.writeSnapshot(this.options.projectRoot, snapshotPath, opts));
    await Promise.all(promises);
  }

  static async init({
    farm,
    options
  }) {
    let graph = await loadRequestGraph(options);
    return new RequestTracker({
      farm,
      options,
      graph
    });
  }

}

exports.default = RequestTracker;

function getWatcherOptions(options) {
  let vcsDirs = ['.git', '.hg'].map(dir => _path().default.join(options.projectRoot, dir));
  let ignore = [options.cacheDir, ...vcsDirs];
  return {
    ignore
  };
}

async function loadRequestGraph(options) {
  if (options.shouldDisableCache) {
    return new RequestGraph();
  }

  let cacheKey = (0, _utils().md5FromObject)({
    parcelVersion: _constants().PARCEL_VERSION,
    entries: options.entries
  });
  let requestGraphKey = (0, _utils().md5FromString)(`${cacheKey}:requestGraph`);
  let requestGraph = await options.cache.get(requestGraphKey);

  if (requestGraph) {
    let opts = getWatcherOptions(options);
    let snapshotKey = (0, _utils().md5FromString)(`${cacheKey}:snapshot`);

    let snapshotPath = options.cache._getCachePath(snapshotKey, '.txt');

    let events = await options.inputFS.getEventsSince(options.projectRoot, snapshotPath, opts);
    requestGraph.invalidateUnpredictableNodes();
    requestGraph.invalidateEnvNodes(options.env);
    requestGraph.invalidateOptionNodes(options);
    requestGraph.respondToFSEvents(events);
    return requestGraph;
  }

  return new RequestGraph();
}