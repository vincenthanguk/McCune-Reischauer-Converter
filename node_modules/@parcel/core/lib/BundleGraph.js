"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _querystring() {
  const data = _interopRequireDefault(require("querystring"));

  _querystring = function () {
    return data;
  };

  return data;
}

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _crypto() {
  const data = _interopRequireDefault(require("crypto"));

  _crypto = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _utils2() {
  const data = require("./utils");

  _utils2 = function () {
    return data;
  };

  return data;
}

function _Graph() {
  const data = _interopRequireWildcard(require("./Graph"));

  _Graph = function () {
    return data;
  };

  return data;
}

function _Environment() {
  const data = _interopRequireDefault(require("./public/Environment"));

  _Environment = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function makeReadOnlySet(set) {
  return new Proxy(set, {
    get(target, property) {
      if (property === 'delete' || property === 'add' || property === 'clear') {
        return undefined;
      } else {
        // $FlowFixMe
        let value = target[property];
        return typeof value === 'function' ? value.bind(target) : value;
      }
    }

  });
}

class BundleGraph {
  // TODO: These hashes are being invalidated in mutative methods, but this._graph is not a private
  // property so it is possible to reach in and mutate the graph without invalidating these hashes.
  // It needs to be exposed in BundlerRunner for now based on how applying runtimes works and the
  // BundlerRunner takes care of invalidating hashes when runtimes are applied, but this is not ideal.
  constructor({
    graph,
    publicIdByAssetId,
    assetPublicIds,
    bundleContentHashes
  }) {
    _defineProperty(this, "_assetPublicIds", void 0);

    _defineProperty(this, "_publicIdByAssetId", void 0);

    _defineProperty(this, "_bundleContentHashes", void 0);

    _defineProperty(this, "_graph", void 0);

    this._graph = graph;
    this._assetPublicIds = assetPublicIds;
    this._publicIdByAssetId = publicIdByAssetId;
    this._bundleContentHashes = bundleContentHashes;
  }

  static fromAssetGraph(assetGraph, publicIdByAssetId = new Map(), assetPublicIds = new Set()) {
    let graph = new (_Graph().default)();
    let rootNode = assetGraph.getRootNode();
    (0, _assert().default)(rootNode != null && rootNode.type === 'root');
    graph.setRootNode(rootNode);
    let assetGroupIds = new Set();

    for (let [, node] of assetGraph.nodes) {
      if (node.type === 'asset') {
        let {
          id: assetId
        } = node.value; // Generate a new, short public id for this asset to use.
        // If one already exists, use it.

        let publicId = publicIdByAssetId.get(assetId);

        if (publicId == null) {
          publicId = (0, _utils2().getPublicId)(assetId, existing => assetPublicIds.has(existing));
          publicIdByAssetId.set(assetId, publicId);
          assetPublicIds.add(publicId);
        }
      } // Don't copy over asset groups into the bundle graph.


      if (node.type === 'asset_group') {
        assetGroupIds.add(node.id);
      } else {
        graph.addNode(node);
      }
    }

    for (let edge of assetGraph.getAllEdges()) {
      let fromIds;

      if (assetGroupIds.has(edge.from)) {
        fromIds = [...assetGraph.inboundEdges.getEdges(edge.from, null)];
      } else {
        fromIds = [edge.from];
      }

      for (let from of fromIds) {
        if (assetGroupIds.has(edge.to)) {
          for (let to of assetGraph.outboundEdges.getEdges(edge.to, null)) {
            graph.addEdge(from, to);
          }
        } else {
          graph.addEdge(from, edge.to);
        }
      }
    }

    return new BundleGraph({
      graph,
      assetPublicIds,
      bundleContentHashes: new Map(),
      publicIdByAssetId
    });
  }

  serialize() {
    return {
      $$raw: true,
      graph: this._graph.serialize(),
      assetPublicIds: this._assetPublicIds,
      bundleContentHashes: this._bundleContentHashes,
      publicIdByAssetId: this._publicIdByAssetId
    };
  }

  static deserialize(serialized) {
    return new BundleGraph({
      graph: _Graph().default.deserialize(serialized.graph),
      assetPublicIds: serialized.assetPublicIds,
      bundleContentHashes: serialized.bundleContentHashes,
      publicIdByAssetId: serialized.publicIdByAssetId
    });
  }

  addAssetGraphToBundle(asset, bundle, shouldSkipDependency = d => this.isDependencySkipped(d)) {
    // The root asset should be reached directly from the bundle in traversal.
    // Its children will be traversed from there.
    this._graph.addEdge(bundle.id, asset.id);

    this._graph.traverse((node, _, actions) => {
      if (node.type === 'bundle_group') {
        actions.skipChildren();
        return;
      }

      if (node.type === 'dependency' && shouldSkipDependency(node.value)) {
        actions.skipChildren();
        return;
      }

      if (node.type === 'asset' && !this.bundleHasAsset(bundle, node.value)) {
        bundle.stats.size += node.value.stats.size;
      }

      if (node.type === 'asset' || node.type === 'dependency') {
        this._graph.addEdge(bundle.id, node.id, 'contains');
      }

      if (node.type === 'dependency') {
        for (let bundleGroupNode of this._graph.getNodesConnectedFrom(node).filter(node => node.type === 'bundle_group')) {
          (0, _assert().default)(bundleGroupNode.type === 'bundle_group');

          this._graph.addEdge(bundle.id, bundleGroupNode.id, 'bundle');
        } // If the dependency references a target bundle, add a reference edge from
        // the source bundle to the dependency for easy traversal.


        if (this._graph.getNodesConnectedFrom(node, 'references').some(node => node.type === 'bundle')) {
          this._graph.addEdge(bundle.id, node.id, 'references');
        }
      }
    }, (0, _nullthrows().default)(this._graph.getNode(asset.id)));

    this._bundleContentHashes.delete(bundle.id);
  }

  addEntryToBundle(asset, bundle, shouldSkipDependency) {
    this.addAssetGraphToBundle(asset, bundle, shouldSkipDependency);

    if (!bundle.entryAssetIds.includes(asset.id)) {
      bundle.entryAssetIds.push(asset.id);
    }
  }

  internalizeAsyncDependency(bundle, dependency) {
    if (!dependency.isAsync) {
      throw new Error('Expected an async dependency');
    }

    this._graph.addEdge(bundle.id, dependency.id, 'internal_async');

    this.removeExternalDependency(bundle, dependency);
  }

  isDependencySkipped(dependency) {
    let node = this._graph.getNode(dependency.id);

    (0, _assert().default)(node && node.type === 'dependency');
    return !!node.hasDeferred || node.excluded;
  }

  getParentBundlesOfBundleGroup(bundleGroup) {
    return this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode((0, _utils2().getBundleGroupId)(bundleGroup))), 'bundle').filter(node => node.type === 'bundle').map(node => {
      (0, _assert().default)(node.type === 'bundle');
      return node.value;
    });
  }

  resolveAsyncDependency(dependency, bundle) {
    let depNode = (0, _nullthrows().default)(this._graph.getNode(dependency.id));

    if (bundle != null && this._graph.hasEdge(bundle.id, depNode.id, 'internal_async')) {
      let referencedAssetNode = this._graph.getNodesConnectedFrom(depNode, 'references')[0];

      let resolved;

      if (referencedAssetNode == null) {
        resolved = this.getDependencyResolution(dependency, bundle);
      } else {
        // If a referenced asset already exists, resolve this dependency to it.
        (0, _assert().default)(referencedAssetNode.type === 'asset');
        resolved = referencedAssetNode.value;
      }

      if (resolved == null) {
        return;
      } else {
        return {
          type: 'asset',
          value: resolved
        };
      }
    }

    let node = this._graph.getNodesConnectedFrom((0, _nullthrows().default)(this._graph.getNode(dependency.id))).find(node => node.type === 'bundle_group');

    if (node == null) {
      return;
    }

    (0, _assert().default)(node.type === 'bundle_group');
    return {
      type: 'bundle_group',
      value: node.value
    };
  }

  getReferencedBundle(dependency, fromBundle) {
    // If this dependency is async, there will be a bundle group attached to it.
    let node = this._graph.getNodesConnectedFrom((0, _nullthrows().default)(this._graph.getNode(dependency.id))).find(node => node.type === 'bundle_group');

    if (node != null) {
      (0, _assert().default)(node.type === 'bundle_group');
      return this.getBundlesInBundleGroup(node.value).find(b => {
        let mainEntryId = b.entryAssetIds[b.entryAssetIds.length - 1];
        return mainEntryId != null && node.value.entryAssetId === mainEntryId;
      });
    } // Otherwise, it may be a reference to another asset in the same bundle group.
    // Resolve the dependency to an asset, and look for it in one of the referenced bundles.


    let referencedBundles = this.getReferencedBundles(fromBundle);

    let referenced = this._graph.getNodesConnectedFrom((0, _nullthrows().default)(this._graph.getNode(dependency.id)), 'references').find(node => node.type === 'asset');

    if (referenced != null) {
      (0, _assert().default)(referenced.type === 'asset');
      return referencedBundles.find(b => this.bundleHasAsset(b, referenced.value));
    }
  }

  removeAssetGraphFromBundle(asset, bundle) {
    // Remove all contains edges from the bundle to the nodes in the asset's
    // subgraph.
    this._graph.traverse((node, context, actions) => {
      if (node.type === 'bundle_group') {
        actions.skipChildren();
        return;
      }

      if (node.type !== 'dependency' && node.type !== 'asset') {
        return;
      }

      if (this._graph.hasEdge(bundle.id, node.id, 'contains')) {
        this._graph.removeEdge(bundle.id, node.id, 'contains', // Removing this contains edge should not orphan the connected node. This
        // is disabled for performance reasons as these edges are removed as part
        // of a traversal, and checking for orphans becomes quite expensive in
        // aggregate.
        false
        /* removeOrphans */
        );

        if (node.type === 'asset') {
          bundle.stats.size -= asset.stats.size;
        }
      } else {
        actions.skipChildren();
      }

      if (node.type === 'asset' && this._graph.hasEdge(bundle.id, node.id)) {
        // Remove the untyped edge from the bundle to the node (it's an entry)
        this._graph.removeEdge(bundle.id, node.id);

        let entryIndex = bundle.entryAssetIds.indexOf(node.value.id);

        if (entryIndex >= 0) {
          // Shared bundles have untyped edges to their asset graphs but don't
          // have entry assets. For those that have entry asset ids, remove them.
          bundle.entryAssetIds.splice(entryIndex, 1);
        }
      }

      if (node.type === 'dependency') {
        this.removeExternalDependency(bundle, node.value);

        if (this._graph.hasEdge(bundle.id, node.id, 'references')) {
          this._graph.removeEdge(bundle.id, node.id, 'references');
        }
      }
    }, (0, _nullthrows().default)(this._graph.getNode(asset.id))); // Remove bundle node if it no longer has any asset graphs


    let bundleNode = (0, _nullthrows().default)(this._graph.getNode(bundle.id));

    if (this._graph.getNodesConnectedFrom(bundleNode).length === 0) {
      this.removeBundle(bundle);
    }

    this._bundleContentHashes.delete(bundle.id);
  }

  removeBundle(bundle) {
    // Remove bundle node if it no longer has any entry assets
    let bundleNode = (0, _nullthrows().default)(this._graph.getNode(bundle.id));

    let bundleGroupNodes = this._graph.getNodesConnectedTo(bundleNode, 'bundle');

    this._graph.removeNode(bundleNode);

    let removedBundleGroups = new Set(); // Remove bundle group node if it no longer has any bundles

    for (let bundleGroupNode of bundleGroupNodes) {
      (0, _assert().default)(bundleGroupNode.type === 'bundle_group');
      let bundleGroup = bundleGroupNode.value;

      if ( // If the bundle group's entry asset belongs to this bundle, the group
      // was created because of this bundle. Remove the group.
      bundle.entryAssetIds.includes(bundleGroup.entryAssetId) || // If the bundle group is now empty, remove it.
      this.getBundlesInBundleGroup(bundleGroup).length === 0) {
        removedBundleGroups.add(bundleGroup);
        this.removeBundleGroup(bundleGroup);
      }
    }

    this._bundleContentHashes.delete(bundle.id);

    return removedBundleGroups;
  }

  removeBundleGroup(bundleGroup) {
    let bundleGroupNode = (0, _nullthrows().default)(this._graph.getNode((0, _utils2().getBundleGroupId)(bundleGroup)));
    (0, _assert().default)(bundleGroupNode.type === 'bundle_group');
    let bundlesInGroup = this.getBundlesInBundleGroup(bundleGroupNode.value);

    for (let bundle of bundlesInGroup) {
      if (this.getBundleGroupsContainingBundle(bundle).length === 1) {
        let removedBundleGroups = this.removeBundle(bundle);

        if (removedBundleGroups.has(bundleGroup)) {
          // This function can be reentered through removeBundle above. In the case this
          // bundle group has already been removed, stop.
          return;
        }
      }
    }

    this._graph.removeNode(bundleGroupNode);

    (0, _assert().default)(bundlesInGroup.every(bundle => this.getBundleGroupsContainingBundle(bundle).length > 0));
  }

  removeExternalDependency(bundle, dependency) {
    for (let bundleGroupNode of this._graph.getNodesConnectedFrom((0, _nullthrows().default)(this._graph.getNode(dependency.id))).filter(node => node.type === 'bundle_group')) {
      if (!this._graph.hasEdge(bundle.id, bundleGroupNode.id, 'bundle')) {
        continue;
      }

      let inboundDependencies = this._graph.getNodesConnectedTo(bundleGroupNode).filter(node => node.type === 'dependency').map(node => {
        (0, _assert().default)(node.type === 'dependency');
        return node.value;
      }); // If every inbound dependency to this bundle group does not belong to this bundle,
      // or the dependency is internal to the bundle, then the connection between
      // this bundle and the group is safe to remove.


      if (inboundDependencies.every(dependency => !this.bundleHasDependency(bundle, dependency) || this._graph.hasEdge(bundle.id, dependency.id, 'internal_async'))) {
        this._graph.removeEdge(bundle.id, bundleGroupNode.id, 'bundle');
      }
    }
  }

  createAssetReference(dependency, asset, bundle) {
    this._graph.addEdge(dependency.id, asset.id, 'references');

    this._graph.addEdge(dependency.id, bundle.id, 'references');

    if (this._graph.hasEdge(dependency.id, asset.id)) {
      this._graph.removeEdge(dependency.id, asset.id);
    }
  }

  createBundleReference(from, to) {
    this._graph.addEdge(from.id, to.id, 'references');
  }

  findBundlesWithAsset(asset) {
    return this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode(asset.id)), 'contains').filter(node => node.type === 'bundle').map(node => {
      (0, _assert().default)(node.type === 'bundle');
      return node.value;
    });
  }

  findBundlesWithDependency(dependency) {
    return this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode(dependency.id)), 'contains').filter(node => node.type === 'bundle').map(node => {
      (0, _assert().default)(node.type === 'bundle');
      return node.value;
    });
  }

  getDependencyAssets(dependency) {
    let dependencyNode = (0, _nullthrows().default)(this._graph.getNode(dependency.id));
    return this._graph.getNodesConnectedFrom(dependencyNode).filter(node => node.type === 'asset').map(node => {
      (0, _assert().default)(node.type === 'asset');
      return node.value;
    });
  }

  getDependencyResolution(dep, bundle) {
    let depNode = this._graph.getNode(dep.id);

    if (!depNode) {
      return null;
    }

    let assets = this.getDependencyAssets(dep);
    let firstAsset = assets[0];
    let resolved = // If no bundle is specified, use the first concrete asset.
    bundle == null ? firstAsset : // Otherwise, find the first asset that belongs to this bundle.
    assets.find(asset => this.bundleHasAsset(bundle, asset)) || firstAsset; // If a resolution still hasn't been found, return the first referenced asset.

    if (resolved == null) {
      this._graph.traverse((node, _, traversal) => {
        if (node.type === 'asset') {
          resolved = node.value;
          traversal.stop();
        } else if (node.id !== dep.id) {
          traversal.skipChildren();
        }
      }, depNode, 'references');
    }

    return resolved;
  }

  getDependencies(asset) {
    let node = this._graph.getNode(asset.id);

    if (!node) {
      throw new Error('Asset not found');
    }

    return this._graph.getNodesConnectedFrom(node).map(node => {
      (0, _assert().default)(node.type === 'dependency');
      return node.value;
    });
  }

  traverseAssets(bundle, visit) {
    return this.traverseBundle(bundle, (0, _Graph().mapVisitor)(node => node.type === 'asset' ? node.value : null, visit));
  }

  isAssetReferencedByDependant(bundle, asset) {
    let assetNode = (0, _nullthrows().default)(this._graph.getNode(asset.id));

    let dependencies = this._graph.getNodesConnectedTo(assetNode).filter(node => node.type === 'dependency').map(node => {
      (0, _assert().default)(node.type === 'dependency');
      return node.value;
    }); // Collect bundles that depend on this asset being available to reference
    // asynchonously. If any of them appear in our traversal, this asset is
    // referenced.


    let asyncInternalReferencingBundles = new Set(this._graph.getNodesConnectedTo(assetNode, 'references').filter(node => node.type === 'dependency').map(node => {
      (0, _assert().default)(node.type === 'dependency');
      return node;
    }).flatMap(dependencyNode => this._graph.getNodesConnectedTo(dependencyNode, 'internal_async').map(node => {
      (0, _assert().default)(node.type === 'bundle');
      return node.value;
    })));

    const bundleHasReference = bundle => {
      return !this.bundleHasAsset(bundle, asset) && (asyncInternalReferencingBundles.has(bundle) || dependencies.some(dependency => this.bundleHasDependency(bundle, dependency)));
    };

    let visitedBundles = new Set(); // Check if any of this bundle's descendants, referencers, bundles referenced
    // by referencers, or descedants of its referencers reference the asset.

    let siblingBundles = new Set(this.getBundleGroupsContainingBundle(bundle).flatMap(bundleGroup => this.getBundlesInBundleGroup(bundleGroup)));
    return [...siblingBundles].some(referencer => {
      let isReferenced = false;
      this.traverseBundles((descendant, _, actions) => {
        if (descendant.id === bundle.id) {
          return;
        }

        if (visitedBundles.has(descendant)) {
          actions.skipChildren();
          return;
        }

        visitedBundles.add(descendant);

        if (descendant.type !== bundle.type || descendant.env.context !== bundle.env.context) {
          actions.skipChildren();
          return;
        }

        if (bundleHasReference(descendant)) {
          isReferenced = true;
          actions.stop();
        }
      }, referencer);
      return isReferenced;
    });
  }

  hasParentBundleOfType(bundle, type) {
    let parents = this.getParentBundles(bundle);
    return parents.length > 0 && parents.every(parent => parent.type === type);
  }

  getParentBundles(bundle) {
    let parentBundles = new Set();

    for (let bundleGroup of this.getBundleGroupsContainingBundle(bundle)) {
      for (let parentBundle of this.getParentBundlesOfBundleGroup(bundleGroup)) {
        parentBundles.add(parentBundle);
      }
    }

    return [...parentBundles];
  }

  isAssetReachableFromBundle(asset, bundle) {
    // If a bundle's environment is isolated, it can't access assets present
    // in any ancestor bundles. Don't consider any assets reachable.
    if (new (_Environment().default)(bundle.env).isIsolated() || !bundle.isSplittable || bundle.isInline) {
      return false;
    } // For an asset to be reachable from a bundle, it must either exist in a sibling bundle,
    // or in an ancestor bundle group reachable from all parent bundles.


    let bundleGroups = this.getBundleGroupsContainingBundle(bundle);
    return bundleGroups.every(bundleGroup => {
      // If the asset is in any sibling bundles of the original bundle, it is reachable.
      let bundles = this.getBundlesInBundleGroup(bundleGroup);

      if (bundles.some(b => b.id !== bundle.id && this.bundleHasAsset(b, asset))) {
        return true;
      } // Get a list of parent bundle nodes pointing to the bundle group


      let parentBundleNodes = this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode((0, _utils2().getBundleGroupId)(bundleGroup))), 'bundle'); // Check that every parent bundle has a bundle group in its ancestry that contains the asset.


      return parentBundleNodes.every(bundleNode => {
        if (bundleNode.type === 'root') {
          return false;
        }

        let isReachable = true;

        this._graph.traverseAncestors(bundleNode, (node, ctx, actions) => {
          // If we've reached the root or a context change without
          // finding this asset in the ancestry, it is not reachable.
          if (node.type === 'root' || node.type === 'bundle' && node.value.env.context !== bundle.env.context) {
            isReachable = false;
            actions.stop();
            return;
          }

          if (node.type === 'bundle_group') {
            let childBundles = this.getBundlesInBundleGroup(node.value);

            if (childBundles.some(b => b.id !== bundle.id && this.bundleHasAsset(b, asset))) {
              actions.skipChildren();
            }
          }
        }, ['references', 'bundle']);

        return isReachable;
      });
    });
  }

  findReachableBundleWithAsset(bundle, asset) {
    let bundleGroups = this.getBundleGroupsContainingBundle(bundle);

    for (let bundleGroup of bundleGroups) {
      // If the asset is in any sibling bundles, return that bundle.
      let bundles = this.getBundlesInBundleGroup(bundleGroup).reverse();
      let res = bundles.find(b => b.id !== bundle.id && this.bundleHasAsset(b, asset));

      if (res != null) {
        return res;
      }

      let parentBundleNodes = this.getParentBundlesOfBundleGroup(bundleGroup).map(bundle => (0, _nullthrows().default)(this._graph.getNode(bundle.id))); // Find the nearest ancestor bundle that includes the asset.

      for (let bundleNode of parentBundleNodes) {
        (0, _assert().default)(bundleNode.type === 'bundle');

        this._graph.traverseAncestors(bundleNode, (node, ctx, actions) => {
          if (node.type === 'bundle_group') {
            let childBundles = this.getBundlesInBundleGroup(node.value).reverse();
            res = childBundles.find(b => b.id !== bundle.id && this.bundleHasAsset(b, asset));

            if (res != null) {
              actions.stop();
            }
          } // Stop when context changes


          if (node.type === 'bundle' && node.value.env.context !== bundle.env.context) {
            actions.skipChildren();
          }
        }, ['references', 'bundle']);

        if (res != null) {
          return res;
        }
      }
    }
  }

  traverseBundle(bundle, visit) {
    let entries = true; // A modified DFS traversal which traverses entry assets in the same order
    // as their ids appear in `bundle.entryAssetIds`.

    return this._graph.dfs({
      visit: (0, _Graph().mapVisitor)((node, actions) => {
        if (node.id === bundle.id) {
          return;
        }

        if (node.type === 'dependency' || node.type === 'asset') {
          if (this._graph.hasEdge(bundle.id, node.id, 'contains')) {
            return node;
          }
        }

        actions.skipChildren();
      }, visit),
      startNode: (0, _nullthrows().default)(this._graph.getNode(bundle.id)),
      getChildren: node => {
        let children = this._graph.getNodesConnectedFrom((0, _nullthrows().default)(node));

        let sorted = entries && bundle.entryAssetIds.length > 0 ? children.sort((a, b) => {
          let aIndex = bundle.entryAssetIds.indexOf(a.id);
          let bIndex = bundle.entryAssetIds.indexOf(b.id);

          if (aIndex === bIndex) {
            // If both don't exist in the entry asset list, or
            // otherwise have the same index.
            return 0;
          } else if (aIndex === -1) {
            return 1;
          } else if (bIndex === -1) {
            return -1;
          }

          return aIndex - bIndex;
        }) : children;
        entries = false;
        return sorted;
      }
    });
  }

  traverseContents(visit) {
    return this._graph.filteredTraverse(node => node.type === 'asset' || node.type === 'dependency' ? node : null, visit);
  }

  getChildBundles(bundle) {
    let siblings = new Set(this.getReferencedBundles(bundle));
    let bundles = [];
    this.traverseBundles((b, _, actions) => {
      if (bundle.id === b.id) {
        return;
      }

      if (!siblings.has(b)) {
        bundles.push(b);
      }

      actions.skipChildren();
    }, bundle);
    return bundles;
  }

  traverseBundles(visit, startBundle) {
    return this._graph.filteredTraverse(node => node.type === 'bundle' ? node.value : null, visit, startBundle ? (0, _nullthrows().default)(this._graph.getNode(startBundle.id)) : null, ['bundle', 'references']);
  }

  getBundles() {
    let bundles = [];
    this.traverseBundles(bundle => {
      bundles.push(bundle);
    });
    return bundles;
  }

  getTotalSize(asset) {
    let size = 0;

    this._graph.traverse((node, _, actions) => {
      if (node.type === 'bundle_group') {
        actions.skipChildren();
        return;
      }

      if (node.type === 'asset') {
        size += node.value.stats.size;
      }
    }, (0, _nullthrows().default)(this._graph.getNode(asset.id)));

    return size;
  }

  getReferencingBundles(bundle) {
    let referencingBundles = new Set();
    let bundleNode = (0, _nullthrows().default)(this._graph.getNode(bundle.id));

    this._graph.traverseAncestors(bundleNode, node => {
      if (node.type === 'bundle' && node.value.id !== bundle.id) {
        referencingBundles.add(node.value);
      }
    }, 'references');

    return [...referencingBundles];
  }

  getBundleGroupsContainingBundle(bundle) {
    let bundleGroups = new Set();

    for (let currentBundle of [bundle, ...this.getReferencingBundles(bundle)]) {
      for (let bundleGroup of this.getDirectParentBundleGroups(currentBundle)) {
        bundleGroups.add(bundleGroup);
      }
    }

    return [...bundleGroups];
  }

  getDirectParentBundleGroups(bundle) {
    return this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode(bundle.id)), 'bundle').filter(node => node.type === 'bundle_group').map(node => {
      (0, _assert().default)(node.type === 'bundle_group');
      return node.value;
    });
  }

  getBundlesInBundleGroup(bundleGroup) {
    let bundles = new Set();
    let bundleGroupNode = (0, _nullthrows().default)(this._graph.getNode((0, _utils2().getBundleGroupId)(bundleGroup)));

    for (let bundleNode of this._graph.getNodesConnectedFrom(bundleGroupNode, 'bundle')) {
      (0, _assert().default)(bundleNode.type === 'bundle');
      let bundle = bundleNode.value;
      bundles.add(bundle);

      for (let referencedBundle of this.getReferencedBundles(bundle)) {
        bundles.add(referencedBundle);
      }
    }

    return [...bundles];
  }

  getReferencedBundles(bundle, opts) {
    var _opts$recursive;

    let recursive = (_opts$recursive = opts === null || opts === void 0 ? void 0 : opts.recursive) !== null && _opts$recursive !== void 0 ? _opts$recursive : true;
    let referencedBundles = new Set();
    let bundleNode = (0, _nullthrows().default)(this._graph.getNode(bundle.id));

    this._graph.dfs({
      visit: (node, _, actions) => {
        if (node.type !== 'bundle') {
          return;
        }

        if (node.value.id === bundle.id) {
          return;
        }

        referencedBundles.add(node.value);

        if (!recursive) {
          actions.skipChildren();
        }
      },
      startNode: bundleNode,
      getChildren: node => // Shared bundles seem to depend on being used in the opposite order
      // they were added.
      // TODO: Should this be the case?
      this._graph.getNodesConnectedFrom(node, 'references').reverse()
    });

    return [...referencedBundles];
  }

  getIncomingDependencies(asset) {
    let node = this._graph.getNode(asset.id);

    if (!node) {
      return [];
    } // Dependencies can be a a parent node via an untyped edge (like in the AssetGraph but without AssetGroups)
    // or they can be parent nodes via a 'references' edge


    return this._graph // $FlowFixMe
    .getNodesConnectedTo(node, _Graph().ALL_EDGE_TYPES).filter(n => n.type === 'dependency').map(n => {
      (0, _assert().default)(n.type === 'dependency');
      return n.value;
    });
  }

  getAssetWithDependency(dep) {
    var _res$;

    let node = this._graph.getNode(dep.id);

    if (!node) {
      return null;
    }

    let res = this._graph.getNodesConnectedTo(node);

    (0, _assert().default)(res.length <= 1, 'Expected a single asset to be connected to a dependency');

    if (((_res$ = res[0]) === null || _res$ === void 0 ? void 0 : _res$.type) === 'asset') {
      return res[0].value;
    }
  }

  bundleHasAsset(bundle, asset) {
    return this._graph.hasEdge(bundle.id, asset.id, 'contains');
  }

  bundleHasDependency(bundle, dependency) {
    return this._graph.hasEdge(bundle.id, dependency.id, 'contains');
  }

  filteredTraverse(bundle, filter, visit) {
    return this._graph.filteredTraverse(filter, visit, (0, _nullthrows().default)(this._graph.getNode(bundle.id)));
  }

  resolveSymbol(asset, symbol, boundary) {
    var _asset$symbols, _asset$symbols$get;

    let assetOutside = boundary && !this.bundleHasAsset(boundary, asset);
    let identifier = (_asset$symbols = asset.symbols) === null || _asset$symbols === void 0 ? void 0 : (_asset$symbols$get = _asset$symbols.get(symbol)) === null || _asset$symbols$get === void 0 ? void 0 : _asset$symbols$get.local;

    if (symbol === '*') {
      var _asset$symbols2, _asset$symbols2$get;

      return {
        asset,
        exportSymbol: '*',
        symbol: identifier !== null && identifier !== void 0 ? identifier : null,
        loc: (_asset$symbols2 = asset.symbols) === null || _asset$symbols2 === void 0 ? void 0 : (_asset$symbols2$get = _asset$symbols2.get(symbol)) === null || _asset$symbols2$get === void 0 ? void 0 : _asset$symbols2$get.loc
      };
    }

    let found = false;
    let skipped = false;
    let deps = this.getDependencies(asset).reverse();
    let potentialResults = [];

    for (let dep of deps) {
      var _depSymbols$get;

      let depSymbols = dep.symbols;

      if (!depSymbols) {
        found = true;
        continue;
      } // If this is a re-export, find the original module.


      let symbolLookup = new Map([...depSymbols].map(([key, val]) => [val.local, key]));
      let depSymbol = symbolLookup.get(identifier);

      if (depSymbol != null) {
        let resolved = this.getDependencyResolution(dep);

        if (!resolved || resolved.id === asset.id) {
          var _asset$symbols3, _asset$symbols3$get;

          // External module or self-reference
          return {
            asset,
            exportSymbol: symbol,
            symbol: identifier,
            loc: (_asset$symbols3 = asset.symbols) === null || _asset$symbols3 === void 0 ? void 0 : (_asset$symbols3$get = _asset$symbols3.get(symbol)) === null || _asset$symbols3$get === void 0 ? void 0 : _asset$symbols3$get.loc
          };
        }

        if (assetOutside) {
          // We found the symbol, but `asset` is outside, return `asset` and the original symbol
          found = true;
          break;
        }

        if (this.isDependencySkipped(dep)) {
          // We found the symbol and `dep` was skipped
          skipped = true;
          break;
        }

        let {
          asset: resolvedAsset,
          symbol: resolvedSymbol,
          exportSymbol,
          loc
        } = this.resolveSymbol(resolved, depSymbol, boundary);

        if (!loc) {
          var _asset$symbols4, _asset$symbols4$get;

          // Remember how we got there
          loc = (_asset$symbols4 = asset.symbols) === null || _asset$symbols4 === void 0 ? void 0 : (_asset$symbols4$get = _asset$symbols4.get(symbol)) === null || _asset$symbols4$get === void 0 ? void 0 : _asset$symbols4$get.loc;
        }

        return {
          asset: resolvedAsset,
          symbol: resolvedSymbol,
          exportSymbol,
          loc
        };
      } // If this module exports wildcards, resolve the original module.
      // Default exports are excluded from wildcard exports.
      // Wildcard reexports are never listed in the reexporting asset's symbols.


      if (identifier == null && ((_depSymbols$get = depSymbols.get('*')) === null || _depSymbols$get === void 0 ? void 0 : _depSymbols$get.local) === '*' && symbol !== 'default') {
        let resolved = this.getDependencyResolution(dep);

        if (!resolved) {
          continue;
        }

        let result = this.resolveSymbol(resolved, symbol, boundary); // We found the symbol

        if (result.symbol != undefined) {
          var _resolved$symbols, _resolved$symbols$get;

          if (assetOutside) {
            // ..., but `asset` is outside, return `asset` and the original symbol
            found = true;
            break;
          }

          if (this.isDependencySkipped(dep)) {
            // We found the symbol and `dep` was skipped
            skipped = true;
            break;
          }

          return {
            asset: result.asset,
            symbol: result.symbol,
            exportSymbol: result.exportSymbol,
            loc: (_resolved$symbols = resolved.symbols) === null || _resolved$symbols === void 0 ? void 0 : (_resolved$symbols$get = _resolved$symbols.get(symbol)) === null || _resolved$symbols$get === void 0 ? void 0 : _resolved$symbols$get.loc
          };
        }

        if (result.symbol === null) {
          found = true;

          if (boundary && !this.bundleHasAsset(boundary, result.asset)) {
            // If the returned asset is outside (and it's the first asset that is outside), return it.
            if (!assetOutside) {
              var _resolved$symbols2, _resolved$symbols2$ge;

              return {
                asset: result.asset,
                symbol: result.symbol,
                exportSymbol: result.exportSymbol,
                loc: (_resolved$symbols2 = resolved.symbols) === null || _resolved$symbols2 === void 0 ? void 0 : (_resolved$symbols2$ge = _resolved$symbols2.get(symbol)) === null || _resolved$symbols2$ge === void 0 ? void 0 : _resolved$symbols2$ge.loc
              };
            } else {
              // Otherwise the original asset will be returned at the end.
              break;
            }
          } else {
            var _resolved$symbols3, _resolved$symbols3$ge;

            // We didn't find it in this dependency, but it might still be there: bailout.
            // Continue searching though, with the assumption that there are no conficting reexports
            // and there might be a another (re)export (where we might statically find the symbol).
            potentialResults.push({
              asset: result.asset,
              symbol: result.symbol,
              exportSymbol: result.exportSymbol,
              loc: (_resolved$symbols3 = resolved.symbols) === null || _resolved$symbols3 === void 0 ? void 0 : (_resolved$symbols3$ge = _resolved$symbols3.get(symbol)) === null || _resolved$symbols3$ge === void 0 ? void 0 : _resolved$symbols3$ge.loc
            });
          }
        }
      }
    } // We didn't find the exact symbol...


    if (potentialResults.length == 1) {
      // ..., but if it does exist, it has to be behind this one reexport.
      return potentialResults[0];
    } else {
      var _asset$symbols5, _asset$symbols6, _asset$symbols6$get;

      // ... and there is no single reexport, but `bailout` tells us if it might still be exported.
      return {
        asset,
        exportSymbol: symbol,
        symbol: skipped ? false : found ? null : identifier !== null && identifier !== void 0 ? identifier : (_asset$symbols5 = asset.symbols) !== null && _asset$symbols5 !== void 0 && _asset$symbols5.has('*') ? null : undefined,
        loc: (_asset$symbols6 = asset.symbols) === null || _asset$symbols6 === void 0 ? void 0 : (_asset$symbols6$get = _asset$symbols6.get(symbol)) === null || _asset$symbols6$get === void 0 ? void 0 : _asset$symbols6$get.loc
      };
    }
  }

  getAssetById(id) {
    let node = this._graph.getNode(id);

    if (node == null) {
      throw new Error('Node not found');
    } else if (node.type !== 'asset') {
      throw new Error('Node was not an asset');
    }

    return node.value;
  }

  getAssetPublicId(asset) {
    let publicId = this._publicIdByAssetId.get(asset.id);

    if (publicId == null) {
      throw new Error("Asset or it's public id not found");
    }

    return publicId;
  }

  getExportedSymbols(asset, boundary) {
    if (!asset.symbols) {
      return [];
    }

    let symbols = [];

    for (let symbol of asset.symbols.keys()) {
      symbols.push({ ...this.resolveSymbol(asset, symbol, boundary),
        exportAs: symbol
      });
    }

    let deps = this.getDependencies(asset);

    for (let dep of deps) {
      var _depSymbols$get2;

      let depSymbols = dep.symbols;
      if (!depSymbols) continue;

      if (((_depSymbols$get2 = depSymbols.get('*')) === null || _depSymbols$get2 === void 0 ? void 0 : _depSymbols$get2.local) === '*') {
        let resolved = this.getDependencyResolution(dep);
        if (!resolved) continue;
        let exported = this.getExportedSymbols(resolved, boundary).filter(s => s.exportSymbol !== 'default').map(s => ({ ...s,
          exportAs: s.exportSymbol
        }));
        symbols.push(...exported);
      }
    }

    return symbols;
  }

  getContentHash(bundle) {
    let existingHash = this._bundleContentHashes.get(bundle.id);

    if (existingHash != null) {
      return existingHash;
    }

    let hash = _crypto().default.createHash('md5'); // TODO: sort??


    this.traverseAssets(bundle, asset => {
      hash.update([this.getAssetPublicId(asset), asset.outputHash, asset.filePath, _querystring().default.stringify(asset.query), asset.type, asset.uniqueKey].join(':'));
    });
    let hashHex = hash.digest('hex');

    this._bundleContentHashes.set(bundle.id, hashHex);

    return hashHex;
  }

  getInlineBundles(bundle) {
    let bundles = [];
    let seen = new Set();

    let addReferencedBundles = bundle => {
      if (seen.has(bundle.id)) {
        return;
      }

      seen.add(bundle.id);
      let referencedBundles = this.getReferencedBundles(bundle);

      for (let referenced of referencedBundles) {
        if (referenced.isInline) {
          bundles.push(referenced);
          addReferencedBundles(referenced);
        }
      }
    };

    addReferencedBundles(bundle);
    this.traverseBundles((childBundle, _, traversal) => {
      if (childBundle.isInline) {
        bundles.push(childBundle);
      } else if (childBundle.id !== bundle.id) {
        traversal.skipChildren();
      }
    }, bundle);
    return bundles;
  }

  getHash(bundle) {
    let hash = _crypto().default.createHash('md5');

    hash.update(bundle.id);
    hash.update(this.getContentHash(bundle));
    let inlineBundles = this.getInlineBundles(bundle);

    for (let inlineBundle of inlineBundles) {
      hash.update(this.getContentHash(inlineBundle));
    }

    for (let referencedBundle of this.getReferencedBundles(bundle)) {
      if (!referencedBundle.isInline) {
        hash.update(referencedBundle.id);
      }
    }

    hash.update(JSON.stringify((0, _utils().objectSortedEntriesDeep)(bundle.env)));
    return hash.digest('hex');
  }

  addBundleToBundleGroup(bundle, bundleGroup) {
    let bundleGroupId = (0, _utils2().getBundleGroupId)(bundleGroup);

    if (this._graph.hasEdge(bundleGroupId, bundle.id, 'bundle')) {
      // Bundle group already has bundle
      return;
    }

    this._graph.addEdge(bundleGroupId, bundle.id);

    this._graph.addEdge(bundleGroupId, bundle.id, 'bundle');

    for (let entryAssetId of bundle.entryAssetIds) {
      if (this._graph.hasEdge(bundleGroupId, entryAssetId)) {
        this._graph.removeEdge(bundleGroupId, entryAssetId);
      }
    }
  }

  getUsedSymbolsAsset(asset) {
    let node = this._graph.getNode(asset.id);

    (0, _assert().default)(node && node.type === 'asset');
    return makeReadOnlySet(node.usedSymbols);
  }

  getUsedSymbolsDependency(dep) {
    let node = this._graph.getNode(dep.id);

    (0, _assert().default)(node && node.type === 'dependency');
    return makeReadOnlySet(node.usedSymbolsUp);
  }

  merge(other) {
    for (let [, node] of other._graph.nodes) {
      let existingNode = this._graph.getNode(node.id);

      if (existingNode != null) {
        // Merge symbols, recompute dep.exluded based on that
        if (existingNode.type === 'asset') {
          (0, _assert().default)(node.type === 'asset');
          existingNode.usedSymbols = new Set([...existingNode.usedSymbols, ...node.usedSymbols]);
        } else if (existingNode.type === 'dependency') {
          (0, _assert().default)(node.type === 'dependency');
          existingNode.usedSymbolsDown = new Set([...existingNode.usedSymbolsDown, ...node.usedSymbolsDown]);
          existingNode.usedSymbolsUp = new Set([...existingNode.usedSymbolsUp, ...node.usedSymbolsUp]);
          existingNode.excluded = (existingNode.excluded || Boolean(existingNode.hasDeferred)) && (node.excluded || Boolean(node.hasDeferred));
        }
      } else {
        this._graph.addNode(node);
      }
    }

    for (let edge of other._graph.getAllEdges()) {
      this._graph.addEdge(edge.from, edge.to, edge.type);
    }
  }

  isEntryBundleGroup(bundleGroup) {
    return this._graph.getNodesConnectedTo((0, _nullthrows().default)(this._graph.getNode((0, _utils2().getBundleGroupId)(bundleGroup))), 'bundle').some(n => n.type === 'root');
  }

}

exports.default = BundleGraph;