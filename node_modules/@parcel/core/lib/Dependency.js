"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createDependency = createDependency;
exports.mergeDependencies = mergeDependencies;

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function createDependency(opts) {
  var _opts$isAsync, _opts$isOptional, _opts$isURL, _opts$isIsolated;

  let id = opts.id || (0, _utils().md5FromOrderedObject)({
    sourceAssetId: opts.sourceAssetId,
    moduleSpecifier: opts.moduleSpecifier,
    env: opts.env.id,
    target: opts.target,
    pipeline: opts.pipeline
  });
  return { ...opts,
    id,
    isAsync: (_opts$isAsync = opts.isAsync) !== null && _opts$isAsync !== void 0 ? _opts$isAsync : false,
    isEntry: opts.isEntry,
    isOptional: (_opts$isOptional = opts.isOptional) !== null && _opts$isOptional !== void 0 ? _opts$isOptional : false,
    isURL: (_opts$isURL = opts.isURL) !== null && _opts$isURL !== void 0 ? _opts$isURL : false,
    isIsolated: (_opts$isIsolated = opts.isIsolated) !== null && _opts$isIsolated !== void 0 ? _opts$isIsolated : false,
    meta: opts.meta || {},
    symbols: opts.symbols
  };
}

function mergeDependencies(a, b) {
  let {
    meta,
    symbols,
    ...other
  } = b;
  Object.assign(a, other);
  Object.assign(a.meta, meta);

  if (a.symbols && symbols) {
    for (let [k, v] of symbols) {
      a.symbols.set(k, v);
    }
  }
}