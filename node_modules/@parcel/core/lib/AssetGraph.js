"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.nodeFromDep = nodeFromDep;
exports.nodeFromAssetGroup = nodeFromAssetGroup;
exports.nodeFromAsset = nodeFromAsset;
exports.nodeFromEntrySpecifier = nodeFromEntrySpecifier;
exports.nodeFromEntryFile = nodeFromEntryFile;
exports.default = void 0;

function _assert() {
  const data = _interopRequireDefault(require("assert"));

  _assert = function () {
    return data;
  };

  return data;
}

function _crypto() {
  const data = _interopRequireDefault(require("crypto"));

  _crypto = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _nullthrows() {
  const data = _interopRequireDefault(require("nullthrows"));

  _nullthrows = function () {
    return data;
  };

  return data;
}

function _Graph() {
  const data = _interopRequireDefault(require("./Graph"));

  _Graph = function () {
    return data;
  };

  return data;
}

function _Dependency() {
  const data = require("./Dependency");

  _Dependency = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function nodeFromDep(dep) {
  return {
    id: dep.id,
    type: 'dependency',
    value: dep,
    deferred: false,
    excluded: false,
    usedSymbolsDown: new Set(),
    usedSymbolsUp: new Set(),
    usedSymbolsDownDirty: true,
    usedSymbolsUpDirtyDown: true,
    usedSymbolsUpDirtyUp: true
  };
}

function nodeFromAssetGroup(assetGroup) {
  return {
    id: (0, _utils().md5FromOrderedObject)({
      filePath: assetGroup.filePath,
      env: assetGroup.env.id,
      isSource: assetGroup.isSource,
      sideEffects: assetGroup.sideEffects,
      code: assetGroup.code,
      pipeline: assetGroup.pipeline,
      query: assetGroup.query ? (0, _utils().objectSortedEntries)(assetGroup.query) : null
    }),
    type: 'asset_group',
    value: assetGroup,
    usedSymbolsDownDirty: true
  };
}

function nodeFromAsset(asset) {
  return {
    id: asset.id,
    type: 'asset',
    value: asset,
    usedSymbols: new Set(),
    usedSymbolsDownDirty: true,
    usedSymbolsUpDirty: true
  };
}

function nodeFromEntrySpecifier(entry) {
  return {
    id: 'entry_specifier:' + entry,
    type: 'entry_specifier',
    value: entry
  };
}

function nodeFromEntryFile(entry) {
  return {
    id: 'entry_file:' + (0, _utils().md5FromObject)(entry),
    type: 'entry_file',
    value: entry
  };
}

class AssetGraph extends _Graph().default {
  constructor(opts) {
    if (opts) {
      let {
        hash,
        ...rest
      } = opts;
      super(rest);

      _defineProperty(this, "onNodeRemoved", void 0);

      _defineProperty(this, "hash", void 0);

      _defineProperty(this, "envCache", void 0);

      this.hash = hash;
    } else {
      super();

      _defineProperty(this, "onNodeRemoved", void 0);

      _defineProperty(this, "hash", void 0);

      _defineProperty(this, "envCache", void 0);

      this.setRootNode({
        id: '@@root',
        type: 'root',
        value: null
      });
    }

    this.envCache = new Map();
  } // $FlowFixMe


  static deserialize(opts) {
    return new AssetGraph(opts);
  } // $FlowFixMe


  serialize() {
    // $FlowFixMe Added in Flow 0.121.0 upgrade in #4381
    return { ...super.serialize(),
      hash: this.hash
    };
  } // Deduplicates Environments by making them referentially equal


  normalizeEnvironment(input) {
    let {
      id,
      context
    } = input.env;
    let idAndContext = `${id}-${context}`;
    let env = this.envCache.get(idAndContext);

    if (env) {
      input.env = env;
    } else {
      this.envCache.set(idAndContext, input.env);
    }
  }

  setRootConnections({
    entries,
    assetGroups
  }) {
    let nodes = [];

    if (entries) {
      for (let entry of entries) {
        let node = nodeFromEntrySpecifier(entry);
        nodes.push(node);
      }
    } else if (assetGroups) {
      nodes.push(...assetGroups.map(assetGroup => nodeFromAssetGroup(assetGroup)));
    }

    this.replaceNodesConnectedTo((0, _nullthrows().default)(this.getRootNode()), nodes);
  }

  addNode(node) {
    this.hash = null;
    return super.addNode(node);
  }

  removeNode(node) {
    this.hash = null;
    this.onNodeRemoved && this.onNodeRemoved(node); // This needs to mark all connected nodes that doesn't become orphaned
    // due to replaceNodesConnectedTo to make sure that the symbols of
    // nodes from which at least one parent was removed are updated.

    if (this.isOrphanedNode(node) && node.type === 'dependency') {
      let children = this.getNodesConnectedFrom(node);

      for (let n of children) {
        (0, _assert().default)(n.type === 'asset_group' || n.type === 'asset');
        n.usedSymbolsDownDirty = true;
      }
    }

    return super.removeNode(node);
  }

  resolveEntry(entry, resolved, correspondingRequest) {
    let entrySpecifierNode = (0, _nullthrows().default)(this.getNode(nodeFromEntrySpecifier(entry).id));
    (0, _assert().default)(entrySpecifierNode.type === 'entry_specifier');
    entrySpecifierNode.correspondingRequest = correspondingRequest;
    let entryFileNodes = resolved.map(file => nodeFromEntryFile(file));
    this.replaceNodesConnectedTo(entrySpecifierNode, entryFileNodes);
  }

  resolveTargets(entry, targets, correspondingRequest) {
    let depNodes = targets.map(target => {
      let node = nodeFromDep((0, _Dependency().createDependency)({
        moduleSpecifier: entry.filePath,
        pipeline: target.pipeline,
        target: target,
        env: target.env,
        isEntry: true,
        symbols: target.env.isLibrary ? new Map([['*', {
          local: '*',
          isWeak: true,
          loc: null
        }]]) : undefined
      }));

      if (node.value.env.isLibrary) {
        // in library mode, all of the entry's symbols are "used"
        node.usedSymbolsDown.add('*');
      }

      return node;
    });
    let entryNode = (0, _nullthrows().default)(this.getNode(nodeFromEntryFile(entry).id));
    (0, _assert().default)(entryNode.type === 'entry_file');
    entryNode.correspondingRequest = correspondingRequest;

    if (this.hasNode(entryNode.id)) {
      this.replaceNodesConnectedTo(entryNode, depNodes);
    }
  }

  resolveDependency(dependency, assetGroup, correspondingRequest) {
    let depNode = (0, _nullthrows().default)(this.nodes.get(dependency.id));
    (0, _assert().default)(depNode.type === 'dependency');
    if (!depNode) return;
    depNode.correspondingRequest = correspondingRequest;

    if (!assetGroup) {
      return;
    }

    let assetGroupNode = nodeFromAssetGroup(assetGroup);
    let existing = this.getNode(assetGroupNode.id);

    if (existing) {
      (0, _assert().default)(existing.type === 'asset_group');
      assetGroupNode.value.canDefer = assetGroupNode.value.canDefer && existing.value.canDefer;
    }

    this.replaceNodesConnectedTo(depNode, [assetGroupNode]);
  }

  shouldVisitChild(node, childNode) {
    if (node.type !== 'dependency' || childNode.type !== 'asset_group' || childNode.deferred === false) {
      return true;
    }

    let {
      sideEffects,
      canDefer = true
    } = childNode.value;
    let dependency = node.value;
    let previouslyDeferred = childNode.deferred;
    let defer = this.shouldDeferDependency(dependency, sideEffects, canDefer);
    node.hasDeferred = defer;
    childNode.deferred = defer;

    if (!previouslyDeferred && defer) {
      this.markParentsWithHasDeferred(node);
    } else if (previouslyDeferred && !defer) {
      this.unmarkParentsWithHasDeferred(childNode);
    }

    return !defer;
  } // Dependency: mark parent Asset <- AssetGroup with hasDeferred true


  markParentsWithHasDeferred(node) {
    this.traverseAncestors(node, (_node, _, actions) => {
      if (_node.type === 'asset') {
        _node.hasDeferred = true;
      } else if (_node.type === 'asset_group') {
        _node.hasDeferred = true;
        actions.skipChildren();
      } else if (node !== _node) {
        actions.skipChildren();
      }
    });
  } // AssetGroup: update hasDeferred of all parent Dependency <- Asset <- AssetGroup


  unmarkParentsWithHasDeferred(node) {
    this.traverseAncestors(node, (_node, ctx, actions) => {
      if (_node.type === 'asset') {
        let hasDeferred = this.getNodesConnectedFrom(_node).some(_childNode => _childNode.hasDeferred == null ? false : _childNode.hasDeferred);

        if (!hasDeferred) {
          delete _node.hasDeferred;
        }

        return {
          hasDeferred
        };
      } else if (_node.type === 'asset_group' && node !== _node) {
        if (!(ctx !== null && ctx !== void 0 && ctx.hasDeferred)) {
          delete _node.hasDeferred;
        }

        actions.skipChildren();
      } else if (_node.type === 'dependency') {
        _node.hasDeferred = false;
      } else if (node !== _node) {
        actions.skipChildren();
      }
    });
  } // Defer transforming this dependency if it is marked as weak, there are no side effects,
  // no re-exported symbols are used by ancestor dependencies and the re-exporting asset isn't
  // using a wildcard and isn't an entry (in library mode).
  // This helps with performance building large libraries like `lodash-es`, which re-exports
  // a huge number of functions since we can avoid even transforming the files that aren't used.


  shouldDeferDependency(dependency, sideEffects, canDefer) {
    let defer = false;
    let dependencySymbols = dependency.symbols;

    if (dependencySymbols && [...dependencySymbols].every(([, {
      isWeak
    }]) => isWeak) && sideEffects === false && canDefer && !dependencySymbols.has('*')) {
      let depNode = this.getNode(dependency.id);
      (0, _assert().default)(depNode);
      let assets = this.getNodesConnectedTo(depNode);
      let symbols = new Map([...dependencySymbols].map(([key, val]) => [val.local, key]));
      (0, _assert().default)(assets.length === 1);
      let firstAsset = assets[0];
      (0, _assert().default)(firstAsset.type === 'asset');
      let resolvedAsset = firstAsset.value;
      let deps = this.getIncomingDependencies(resolvedAsset);
      defer = deps.every(d => d.symbols && !(d.env.isLibrary && d.isEntry) && !d.symbols.has('*') && ![...d.symbols.keys()].some(symbol => {
        var _resolvedAsset$symbol, _resolvedAsset$symbol2;

        if (!resolvedAsset.symbols) return true;
        let assetSymbol = (_resolvedAsset$symbol = resolvedAsset.symbols) === null || _resolvedAsset$symbol === void 0 ? void 0 : (_resolvedAsset$symbol2 = _resolvedAsset$symbol.get(symbol)) === null || _resolvedAsset$symbol2 === void 0 ? void 0 : _resolvedAsset$symbol2.local;
        return assetSymbol != null && symbols.has(assetSymbol);
      }));
    }

    return defer;
  }

  resolveAssetGroup(assetGroup, assets, correspondingRequest) {
    this.normalizeEnvironment(assetGroup);
    let assetGroupNode = nodeFromAssetGroup(assetGroup);
    assetGroupNode = this.getNode(assetGroupNode.id);

    if (!assetGroupNode) {
      return;
    }

    (0, _assert().default)(assetGroupNode.type === 'asset_group');
    assetGroupNode.correspondingRequest = correspondingRequest;
    let dependentAssetKeys = [];
    let assetObjects = [];

    for (let asset of assets) {
      this.normalizeEnvironment(asset);
      let isDirect = !dependentAssetKeys.includes(asset.uniqueKey);
      let dependentAssets = [];

      for (let dep of asset.dependencies.values()) {
        let dependentAsset = assets.find(a => a.uniqueKey === dep.moduleSpecifier);

        if (dependentAsset) {
          dependentAssetKeys.push(dependentAsset.uniqueKey);
          dependentAssets.push(dependentAsset);
        }
      }

      assetObjects.push({
        assetNode: nodeFromAsset(asset),
        dependentAssets,
        isDirect
      });
    }

    this.replaceNodesConnectedTo(assetGroupNode, assetObjects.filter(a => a.isDirect).map(a => a.assetNode));

    for (let {
      assetNode,
      dependentAssets
    } of assetObjects) {
      // replaceNodesConnectedTo has merged the value into the existing node, retrieve
      // the actual current node.
      assetNode = (0, _nullthrows().default)(this.getNode(assetNode.id));
      (0, _assert().default)(assetNode.type === 'asset');
      this.resolveAsset(assetNode, dependentAssets);
    }
  }

  resolveAsset(assetNode, dependentAssets) {
    let depNodes = [];
    let depNodesWithAssets = [];

    for (let dep of assetNode.value.dependencies.values()) {
      this.normalizeEnvironment(dep);
      let depNode = nodeFromDep(dep);
      let existing = this.getNode(depNode.id);

      if (existing) {
        (0, _assert().default)(existing.type === 'dependency');
        depNode.value.meta = existing.value.meta;
      }

      let dependentAsset = dependentAssets.find(a => a.uniqueKey === dep.moduleSpecifier);

      if (dependentAsset) {
        depNode.complete = true;
        depNodesWithAssets.push([depNode, nodeFromAsset(dependentAsset)]);
      }

      depNodes.push(depNode);
    }

    assetNode.usedSymbolsDownDirty = true;
    this.replaceNodesConnectedTo(assetNode, depNodes);

    for (let [depNode, dependentAssetNode] of depNodesWithAssets) {
      this.replaceNodesConnectedTo(depNode, [dependentAssetNode]);
    }
  }

  getIncomingDependencies(asset) {
    let node = this.getNode(asset.id);

    if (!node) {
      return [];
    }

    return this.findAncestors(node, node => node.type === 'dependency').map(node => {
      (0, _assert().default)(node.type === 'dependency');
      return node.value;
    });
  }

  traverseAssets(visit, startNode) {
    return this.filteredTraverse(node => node.type === 'asset' ? node.value : null, visit, startNode);
  }

  getEntryAssetGroupNodes() {
    let entryNodes = [];
    this.traverse((node, _, actions) => {
      if (node.type === 'asset_group') {
        entryNodes.push(node);
        actions.skipChildren();
      }
    });
    return entryNodes;
  }

  getEntryAssets() {
    let entries = [];
    this.traverseAssets((asset, ctx, traversal) => {
      entries.push(asset);
      traversal.skipChildren();
    });
    return entries;
  }

  getHash() {
    if (this.hash != null) {
      return this.hash;
    }

    let hash = _crypto().default.createHash('md5'); // TODO: sort??


    this.traverse(node => {
      if (node.type === 'asset') {
        hash.update((0, _nullthrows().default)(node.value.outputHash));
      } else if (node.type === 'dependency' && node.value.target) {
        hash.update(JSON.stringify(node.value.target));
      }
    });
    this.hash = hash.digest('hex');
    return this.hash;
  }

}

exports.default = AssetGraph;