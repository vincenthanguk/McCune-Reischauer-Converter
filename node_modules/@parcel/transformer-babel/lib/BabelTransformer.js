"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _babelAstUtils() {
  const data = require("@parcel/babel-ast-utils");

  _babelAstUtils = function () {
    return data;
  };

  return data;
}

function _plugin() {
  const data = require("@parcel/plugin");

  _plugin = function () {
    return data;
  };

  return data;
}

function _semver() {
  const data = _interopRequireDefault(require("semver"));

  _semver = function () {
    return data;
  };

  return data;
}

function _babel() {
  const data = _interopRequireDefault(require("./babel7"));

  _babel = function () {
    return data;
  };

  return data;
}

function _config() {
  const data = require("./config");

  _config = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = new (_plugin().Transformer)({
  async loadConfig({
    config,
    options,
    logger
  }) {
    await (0, _config().load)(config, options, logger);
  },

  canReuseAST({
    ast
  }) {
    return ast.type === 'babel' && _semver().default.satisfies(ast.version, '^7.0.0');
  },

  async transform({
    asset,
    config,
    options
  }) {
    // TODO: Provide invalidateOnEnvChange on config?
    asset.invalidateOnEnvChange('BABEL_ENV');
    asset.invalidateOnEnvChange('NODE_ENV'); // TODO: come up with a better name

    try {
      if (config !== null && config !== void 0 && config.config) {
        if (asset.meta.babelPlugins != null && Array.isArray(asset.meta.babelPlugins)) {
          await (0, _babel().default)(asset, options, config, asset.meta.babelPlugins);
        } else {
          await (0, _babel().default)(asset, options, config);
        }
      }

      return [asset];
    } catch (e) {
      throw await (0, _babelAstUtils().babelErrorEnhancer)(e, asset);
    }
  },

  generate({
    asset,
    ast,
    options
  }) {
    return (0, _babelAstUtils().generate)({
      asset,
      ast,
      options
    });
  }

});

exports.default = _default;