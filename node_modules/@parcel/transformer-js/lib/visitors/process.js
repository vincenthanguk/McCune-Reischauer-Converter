"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function types() {
  const data = _interopRequireWildcard(require("@babel/types"));

  types = function () {
    return data;
  };

  return data;
}

function _micromatch() {
  const data = require("micromatch");

  _micromatch = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("./utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  MemberExpression(node, {
    asset,
    ast,
    env,
    isBrowser,
    isNode,
    replaceEnv
  }, ancestors) {
    // Inline environment variables accessed on process.env
    if (!isNode && types().matchesPattern(node.object, 'process.env')) {
      // $FlowFixMe
      let key = types().toComputedKey(node);

      if ((0, types().isStringLiteral)(key)) {
        let {
          value
        } = key;
        let shouldInline = // If true or matched by glob,
        replaceEnv === true || Array.isArray(replaceEnv) && (0, _micromatch().isMatch)(value, replaceEnv) || // but always inline NODE_ENV or PARCEL_BUILD_ENV in our tests
        value === 'NODE_ENV' || "production" === 'test' && value === 'PARCEL_BUILD_ENV';
        let prop = shouldInline ? env[value] : undefined;

        if (typeof prop !== 'function') {
          let value = types().valueToNode(prop);
          (0, _utils().morph)(node, value); // Mark AST dirty

          asset.setAST(ast);
          asset.invalidateOnEnvChange(key.value);
        }
      } // Inline process.browser

    } else if (isBrowser && types().matchesPattern(node, 'process.browser')) {
      // the last ancestor is the node itself, the one before may be it's parent
      const parent = ancestors[ancestors.length - 2];

      if (parent && (0, types().isAssignmentExpression)(parent) && parent.left === node) {
        parent.right = types().booleanLiteral(true);
      } else {
        (0, _utils().morph)(node, types().booleanLiteral(true));
      } // Mark AST dirty


      asset.setAST(ast);
    }
  }

};
exports.default = _default;